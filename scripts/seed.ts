import mongoose from 'mongoose';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const MONGO_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/kvansum';

// –°—Ö–µ–º—ã
const UserSchema = new mongoose.Schema({
  telegramId: Number,
  username: String,
  firstName: String,
  lastName: String,
  email: String,
}, { timestamps: true });

const HabitSchema = new mongoose.Schema({
  userId: mongoose.Schema.Types.ObjectId,
  name: String,
  emoji: String,
  imageUrl: String,
  note: String,
  time: String,
  difficulty: String,
  period: String,
  streak: { type: Number, default: 0 },
  bestStreak: { type: Number, default: 0 },
  totalDone: { type: Number, default: 0 },
  order: { type: Number, default: 0 },
  isActive: { type: Boolean, default: true },
  isArchived: { type: Boolean, default: false },
}, { timestamps: true });

const HabitLogSchema = new mongoose.Schema({
  userId: mongoose.Schema.Types.ObjectId,
  habitId: mongoose.Schema.Types.ObjectId,
  date: Date,
  status: String,
  note: String,
  points: { type: Number, default: 0 },
}, { timestamps: true });

const UserStatsSchema = new mongoose.Schema({
  userId: mongoose.Schema.Types.ObjectId,
  totalPoints: { type: Number, default: 0 },
  currentLevel: { type: Number, default: 1 },
  currentRank: { type: String, default: 'beginner' },
  longestStreak: { type: Number, default: 0 },
  currentStreak: { type: Number, default: 0 },
  totalHabits: { type: Number, default: 0 },
  completedToday: { type: Number, default: 0 },
  lastActivityAt: { type: Date, default: Date.now },
}, { timestamps: true });

const ThoughtSchema = new mongoose.Schema({
  quote: String,
  author: String,
  isActive: { type: Boolean, default: true },
  order: { type: Number, default: 0 },
}, { timestamps: true });

const ArtefactSchema = new mongoose.Schema({
  title: String,
  emoji: String,
  description: String,
  tag: String,
  isActive: { type: Boolean, default: true },
}, { timestamps: true });

async function seed() {
  try {
    console.log('üå± Connecting to MongoDB...');
    await mongoose.connect(MONGO_URI);
    console.log('‚úÖ Connected to MongoDB');

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üóëÔ∏è  Clearing existing data...');
    await mongoose.connection.dropDatabase();
    console.log('‚úÖ Database cleared');

    const User = mongoose.model('User', UserSchema);
    const Habit = mongoose.model('Habit', HabitSchema);
    const HabitLog = mongoose.model('HabitLog', HabitLogSchema);
    const UserStats = mongoose.model('UserStats', UserStatsSchema);
    const Thought = mongoose.model('Thought', ThoughtSchema);
    const Artefact = mongoose.model('Artefact', ArtefactSchema);

    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ Creating test user...');
    const testUser = await User.create({
      _id: 'test-user-1',
      username: 'test_user',
      firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
      lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      email: 'test@example.com',
    });
    console.log('‚úÖ Test user created:', testUser._id);

    // 2. –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üìä Creating user stats...');
    await UserStats.create({
      userId: testUser._id,
      totalPoints: 450,
      currentLevel: 5,
      currentRank: 'active',
      longestStreak: 12,
      currentStreak: 7,
      totalHabits: 3,
      completedToday: 2,
    });
    console.log('‚úÖ User stats created');

    // 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏
    console.log('üéØ Creating habits...');
    const habits = await Habit.create([
      {
        userId: testUser._id,
        name: '–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞',
        emoji: 'üí™',
        note: '15 –º–∏–Ω—É—Ç —Ä–∞—Å—Ç—è–∂–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
        time: '07:00',
        difficulty: '–°—Ä–µ–¥–Ω—è—è',
        period: '–£—Ç—Ä–æ',
        streak: 7,
        bestStreak: 12,
        totalDone: 45,
        order: 0,
        isActive: true,
      },
      {
        userId: testUser._id,
        name: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
        emoji: 'üßò',
        note: '10 –º–∏–Ω—É—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏',
        time: '07:30',
        difficulty: '–õ–µ–≥–∫–∞—è',
        period: '–£—Ç—Ä–æ',
        streak: 5,
        bestStreak: 10,
        totalDone: 30,
        order: 1,
        isActive: true,
      },
      {
        userId: testUser._id,
        name: '–ß—Ç–µ–Ω–∏–µ',
        emoji: 'üìö',
        note: '–ú–∏–Ω–∏–º—É–º 20 —Å—Ç—Ä–∞–Ω–∏—Ü',
        time: '21:00',
        difficulty: '–õ–µ–≥–∫–∞—è',
        period: '–í–µ—á–µ—Ä',
        streak: 3,
        bestStreak: 8,
        totalDone: 25,
        order: 2,
        isActive: true,
      },
    ]);
    console.log('‚úÖ Created', habits.length, 'habits');

    // 4. –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    console.log('üìù Creating habit logs...');
    const today = new Date();
    today.setUTCHours(0, 0, 0, 0);

    const logs = [];
    for (let i = 6; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);

      for (const habit of habits) {
        // –†–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é success
        const random = Math.random();
        let status = 'success';
        let points = 0;

        if (random > 0.7) {
          status = i === 0 ? 'pending' : 'fail';
        } else {
          // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
          const basePoints = habit.difficulty === '–õ–µ–≥–∫–∞—è' ? 10 : 20;
          points = basePoints + Math.min(habit.streak * 2, 50);
        }

        logs.push({
          userId: testUser._id,
          habitId: habit._id,
          date,
          status,
          points,
        });
      }
    }

    await HabitLog.insertMany(logs);
    console.log('‚úÖ Created', logs.length, 'habit logs');

    // 5. –°–æ–∑–¥–∞–µ–º –º—ã—Å–ª–∏ –¥–Ω—è
    console.log('üí≠ Creating thoughts...');
    const thoughts = await Thought.create([
      {
        quote: '–ü—Ä–∏–≤—ã—á–∫–∏ ‚Äî —ç—Ç–æ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è.',
        author: '–î–∂–µ–π–º—Å –ö–ª–∏—Ä',
        order: 0,
      },
      {
        quote: '–¢—ã ‚Äî —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ. –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ ‚Äî –Ω–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∞ –ø—Ä–∏–≤—ã—á–∫–∞.',
        author: '–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å',
        order: 1,
      },
      {
        quote: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è ‚Äî —ç—Ç–æ —Ç–æ, —Å —á–µ–≥–æ —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å. –ü—Ä–∏–≤—ã—á–∫–∞ ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–±—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.',
        author: '–î–∂–∏–º –†—ë–Ω',
        order: 2,
      },
      {
        quote: '–°–Ω–∞—á–∞–ª–∞ –º—ã —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–≤—ã—á–∫–∏, –∑–∞—Ç–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ —Å–æ–∑–¥–∞—é—Ç –Ω–∞—Å.',
        author: '–ß–∞—Ä–ª—å–∑ –ù–æ–±–ª',
        order: 3,
      },
      {
        quote: '–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å.',
        author: '–†–æ–±–µ—Ä—Ç –ö–æ–ª—å–µ—Ä',
        order: 4,
      },
      {
        quote: '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ.',
        author: 'Kvansum',
        order: 5,
      },
      {
        quote: '–ü—É—Ç—å –≤ —Ç—ã—Å—è—á—É –ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.',
        author: '–õ–∞–æ-—Ü–∑—ã',
        order: 6,
      },
      {
        quote: '–ù–µ –∂–¥–∏—Ç–µ. –í—Ä–µ–º—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–º.',
        author: '–ù–∞–ø–æ–ª–µ–æ–Ω –•–∏–ª–ª',
        order: 7,
      },
      {
        quote: '–ú–∞–ª–µ–Ω—å–∫–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.',
        author: '–†–æ–±–∏–Ω –®–∞—Ä–º–∞',
        order: 8,
      },
      {
        quote: '–°–µ–∫—Ä–µ—Ç –ø–µ—Ä–µ–º–µ–Ω –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é —Å–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é –Ω–µ –Ω–∞ –±–æ—Ä—å–±–µ —Å–æ —Å—Ç–∞—Ä—ã–º, –∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ.',
        author: '–°–æ–∫—Ä–∞—Ç',
        order: 9,
      },
    ]);
    console.log('‚úÖ Created', thoughts.length, 'thoughts');

    // 6. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    console.log('üé® Creating artefacts...');
    const artefacts = await Artefact.create([
      {
        title: '–î–Ω–µ–≤–Ω–∏–∫ —É—Å–ø–µ—Ö–æ–≤',
        emoji: 'üìì',
        description: '–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
        tag: '—Ä–µ—Ñ–ª–µ–∫—Å–∏—è',
      },
      {
        title: '–¢—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
        emoji: 'üòä',
        description: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ—ë —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
        tag: '—Ç—Ä–µ–∫–µ—Ä',
      },
      {
        title: '–ö–æ–ª–µ—Å–æ –±–∞–ª–∞–Ω—Å–∞',
        emoji: 'üéØ',
        description: '–û—Ü–µ–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏',
        tag: '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
      },
    ]);
    console.log('‚úÖ Created', artefacts.length, 'artefacts');

    console.log('\nüéâ Seed completed successfully!');
    console.log('\nüìä Summary:');
    console.log('  - Users:', 1);
    console.log('  - Habits:', habits.length);
    console.log('  - Habit Logs:', logs.length);
    console.log('  - Thoughts:', thoughts.length);
    console.log('  - Artefacts:', artefacts.length);
    console.log('\nüë§ Test user ID: test-user-1');

  } catch (error) {
    console.error('‚ùå Error during seeding:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('üëã Disconnected from MongoDB');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º seed
seed();

