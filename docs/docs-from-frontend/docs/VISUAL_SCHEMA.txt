╔═══════════════════════════════════════════════════════════════════════════╗
║                   🎯 АРХИТЕКТУРА: 3 ИСТОЧНИКА ДАННЫХ                      ║
╚═══════════════════════════════════════════════════════════════════════════╝


┌─────────────────────────────────────────────────────────────────────────┐
│                        📁 ИСТОЧНИКИ ДАННЫХ                              │
└─────────────────────────────────────────────────────────────────────────┘

    apps/web/src/features/habits/data/
    │
    ├── 📄 habits.mock.ts    ──→  23 привычки (h-water, h-bed, ...)
    │                              ├─ lvl1: 4 привычки
    │                              ├─ lvl2: 4 привычки
    │                              ├─ lvl3: 3 привычки
    │                              └─ ... (7 уровней)
    │
    ├── 📄 levels.mock.ts    ──→  7 уровней (lvl1, lvl2, ...)
    │                              ├─ Энергия и базовые ресурсы
    │                              ├─ Фокус и внимание
    │                              └─ ... (Архитектор жизни)
    │
    └── 📄 progress.mock.ts  ──→  Прогресс пользователя
                                   ├─ habitStreak: { 'h-water': 18, ... }
                                   └─ levelUnlockedAt: { 'lvl1': '2025-09-01' }


┌─────────────────────────────────────────────────────────────────────────┐
│                            🖥️ SERVER SIDE                                │
└─────────────────────────────────────────────────────────────────────────┘

    apps/web/app/(app)/dashboard/page.tsx
    
    ┌────────────────────────────────────────────┐
    │  export default function Page() {          │
    │                                            │
    │    // 📥 Получаем данные                  │
    │    const habits = HABITS;    ────┐        │
    │    const levels = LEVELS;    ────┤ 3 источника
    │    const progress = PROGRESS;────┘        │
    │                                            │
    │    // 📤 Передаем в Client                │
    │    return <DashboardClient                 │
    │      habits={habits}                       │
    │      levels={levels}                       │
    │      progress={progress}                   │
    │    />;                                     │
    │  }                                         │
    └────────────────────────────────────────────┘
                        │
                        │ Props ⬇️
                        │


┌─────────────────────────────────────────────────────────────────────────┐
│                           💻 CLIENT SIDE                                 │
└─────────────────────────────────────────────────────────────────────────┘

    apps/web/app/(app)/dashboard/DashboardClient.tsx
    
    ┌────────────────────────────────────────────────────────────┐
    │  interface Props {                                         │
    │    habits: Habit[];                                        │
    │    levels: Level[];                                        │
    │    progress: Progress;                                     │
    │  }                                                         │
    │                                                            │
    │  export default function DashboardClient(props) {          │
    │                                                            │
    │    // 🔄 КОНВЕРТАЦИЯ                                      │
    │    const habitCards = habits                               │
    │      .filter(h => h.levelId === 'lvl1')                   │
    │      .map(h => convertToHabitCard(h, progress));          │
    │                                                            │
    │    // 📊 СОРТИРОВКА                                       │
    │    const sortedHabits = habitCards.sort(...);              │
    │                                                            │
    │    // 💾 СОСТОЯНИЕ                                        │
    │    const [statuses, setStatuses] = useState(...);          │
    │                                                            │
    │    // 🎨 UI РЕНДЕРИНГ                                     │
    │    return (                                                │
    │      <div>                                                 │
    │        <ProgressBar value={doneCount} max={total} />      │
    │        <SwipeDeckCard habit={currentHabit} />             │
    │      </div>                                                │
    │    );                                                      │
    │  }                                                         │
    └────────────────────────────────────────────────────────────┘


╔═══════════════════════════════════════════════════════════════════════════╗
║                        🔄 ПОТОК ДАННЫХ (ПРИМЕР)                           ║
╚═══════════════════════════════════════════════════════════════════════════╝


1️⃣  ИСТОЧНИК: habits.mock.ts
    ┌────────────────────────────────────────────────────┐
    │  {                                                 │
    │    id: 'h-water',                                  │
    │    levelId: 'lvl1',                                │
    │    title: 'Стакан воды после пробуждения',         │
    │    difficulty: 'easy',                             │
    │    timeOfDay: 'morning',                           │
    │    days: ['daily'],                                │
    │    emoji: '💧',                                    │
    │    summary: 'Запускает обмен веществ...',          │
    │    stages: [...]                                   │
    │  }                                                 │
    └────────────────────────────────────────────────────┘
                        │
                        ⬇️ импортируется в page.tsx


2️⃣  SERVER: page.tsx
    ┌────────────────────────────────────────────────────┐
    │  const habits = HABITS;  // содержит h-water       │
    │  const progress = PROGRESS;  // streak: 18 дней    │
    └────────────────────────────────────────────────────┘
                        │
                        ⬇️ передается через props


3️⃣  CLIENT: DashboardClient.tsx → convertToHabitCard()
    ┌────────────────────────────────────────────────────┐
    │  INPUT: Habit + Progress                           │
    │  ├─ habit.title         → 'Стакан воды...'        │
    │  ├─ habit.emoji         → '💧'                     │
    │  ├─ habit.timeOfDay     → 'morning' → '07:00'     │
    │  ├─ habit.summary       → 'Запускает обмен...'    │
    │  └─ progress.habitStreak['h-water'] → 18          │
    │                                                    │
    │  OUTPUT: HabitCard                                 │
    │  {                                                 │
    │    id: 'h-water',                                  │
    │    name: 'Стакан воды после пробуждения',          │
    │    emoji: '💧',                                    │
    │    time: '07:00',                                  │
    │    note: 'Запускает обмен веществ...',             │
    │    streak: 18                                      │
    │  }                                                 │
    └────────────────────────────────────────────────────┘
                        │
                        ⬇️ рендерится в UI


4️⃣  UI: SwipeDeckCard
    ┌────────────────────────────────────────────────────┐
    │                                                    │
    │   ╭──────────────────────────────────────╮        │
    │   │  💧                                  │        │
    │   │  Стакан воды после пробуждения       │        │
    │   │  ⏰ 07:00                            │        │
    │   │  🔥 18 дней подряд                   │        │
    │   │  📝 Запускает обмен веществ...       │        │
    │   │                                      │        │
    │   │  [← ПРОПУСТИТЬ]  [ГОТОВО →]         │        │
    │   ╰──────────────────────────────────────╯        │
    │                                                    │
    └────────────────────────────────────────────────────┘


╔═══════════════════════════════════════════════════════════════════════════╗
║                    🚀 МИГРАЦИЯ НА API (В БУДУЩЕМ)                          ║
╚═══════════════════════════════════════════════════════════════════════════╝


   СЕЙЧАС (моки):                    ПОТОМ (API):
   
   ┌──────────────────┐              ┌──────────────────────┐
   │  habits.mock.ts  │              │  GET /api/habits     │
   │  levels.mock.ts  │              │  GET /api/levels     │
   │  progress.mock   │              │  GET /api/progress   │
   └────────┬─────────┘              └──────────┬───────────┘
            │                                   │
            │ import                            │ await fetch()
            ↓                                   ↓
   ┌──────────────────────────────────────────────────────┐
   │  page.tsx                                            │
   │                                                      │
   │  const habits = HABITS;      →  const habits = await fetch(...)  │
   │  const levels = LEVELS;      →  const levels = await fetch(...)  │
   │  const progress = PROGRESS;  →  const progress = await fetch(...) │
   │                                                      │
   │  return <DashboardClient {...} />;                   │
   └──────────────────────────────────────────────────────┘
                            │
                            ↓
              ┌────────────────────────────┐
              │  DashboardClient.tsx       │
              │  ⚠️  НЕ МЕНЯЕТСЯ!          │
              └────────────────────────────┘


╔═══════════════════════════════════════════════════════════════════════════╗
║                           ✅ ПРОВЕРКА                                      ║
╚═══════════════════════════════════════════════════════════════════════════╝


┌─────────────────────────────────────────────────────────────┐
│  ✅ 3 источника данных используются                         │
│     ├─ habits.mock.ts   → 23 привычки                       │
│     ├─ levels.mock.ts   → 7 уровней                         │
│     └─ progress.mock.ts → стрики, разблокировки             │
│                                                             │
│  ✅ Server/Client разделение корректно                      │
│     ├─ page.tsx         → Server Component (получает данные)│
│     └─ DashboardClient  → Client Component (UI)             │
│                                                             │
│  ✅ Типизация через TypeScript                              │
│     ├─ Habit (сервер)   → convertToHabitCard()              │
│     └─ HabitCard (UI)   → SwipeDeckCard                     │
│                                                             │
│  ✅ Легко мигрировать на API                                │
│     └─ Меняется только page.tsx                             │
│                                                             │
│  ✅ Нет хардкода в компонентах                              │
│     └─ Удален: const HABITS = [{...}, {...}]                │
└─────────────────────────────────────────────────────────────┘


╔═══════════════════════════════════════════════════════════════════════════╗
║                       📊 СТАТИСТИКА ДАННЫХ                                 ║
╚═══════════════════════════════════════════════════════════════════════════╝


    📄 habits.mock.ts:      23 привычки
       ├─ lvl1 (🩵):         4 привычки (h-water, h-bed, h-stretch, h-cold)
       ├─ lvl2 (🧠):         4 привычки
       ├─ lvl3 (🔥):         3 привычки
       ├─ lvl4 (🌿):         3 привычки
       ├─ lvl5 (⚙️):         3 привычки
       ├─ lvl6 (🚀):         3 привычки
       └─ lvl7 (🧩):         3 привычки

    📄 levels.mock.ts:       7 уровней
       └─ Прогрессия: lvl1 → lvl2 → ... → lvl7

    📄 progress.mock.ts:     Прогресс пользователя
       ├─ habitStreak:       стрики по всем привычкам
       │  ├─ h-water: 18 дней
       │  ├─ h-bed: 12 дней
       │  └─ ...
       └─ levelUnlockedAt:   разблокированные уровни
          └─ lvl1: '2025-09-01' (остальные locked)


╔═══════════════════════════════════════════════════════════════════════════╗
║                        🎯 ИТОГОВЫЙ ВЕРДИКТ                                 ║
╚═══════════════════════════════════════════════════════════════════════════╝


    ╔════════════════════════════════════════════╗
    ║  ✅ АРХИТЕКТУРА РАБОТАЕТ ПРАВИЛЬНО!        ║
    ╚════════════════════════════════════════════╝

    Все 3 источника данных:
    ✓ Используются корректно
    ✓ Передаются через props
    ✓ Конвертируются в UI формат
    ✓ Готовы к замене на API

    Следует best practices:
    ✓ Next.js 13+ App Router
    ✓ Server/Client Components
    ✓ TypeScript типизация
    ✓ Разделение ответственности


══════════════════════════════════════════════════════════════════════════════
                           🎉 ГОТОВО К РАБОТЕ!
══════════════════════════════════════════════════════════════════════════════
